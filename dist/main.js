(()=>{"use strict";document.getElementById("home"),document.getElementById("add_project");const e=document.getElementById("calendar"),t=(document.getElementById("settings"),document.getElementById("login"),document.querySelector(".content"),document.querySelector("#calendarPage")),n=document.querySelector("#homePage"),s=document.getElementById("plus"),r=document.getElementById("form-input-project"),o=document.getElementById("settings-options"),a=document.getElementById("svg-config");document.getElementById("night-mode"),n.style.display="block",o.style.display="none";const i=document.getElementById("home"),l=document.getElementById("add_project"),d=document.getElementById("calendar"),h=document.getElementById("settings"),u=(document.getElementById("login"),document.querySelector(".content"),document.querySelector("#calendarPage"),document.querySelector("#homePage"),document.getElementById("plus"),document.querySelector(".list"),document.getElementById("form-input-project"),document.getElementById("night-mode"));i.onclick=()=>{"block"!=n.style.display&&(t.removeAttribute("class"),n.removeAttribute("class"),n.setAttribute("class","slideLeft2"),t.setAttribute("class","slideLeft"),setTimeout((()=>{t.style.display="none",n.style.display="block"}),500))},l.onclick=()=>{"rotate"===s.getAttribute("class")?(s.removeAttribute("class"),s.setAttribute("class","return"),r.removeAttribute("class"),r.setAttribute("class","up"),e.removeAttribute("class"),setTimeout((()=>{r.style.display="none"}),1e3)):(null==s.getAttribute("class")||"return"===s.getAttribute("class"))&&(s.removeAttribute("class"),s.setAttribute("class","rotate"),r.style.display="flex",r.removeAttribute("class"),r.setAttribute("class","down"),e.removeAttribute("class"),e.setAttribute("class","down1"))},d.onclick=()=>(n.setAttribute("class","slideLeft"),t.setAttribute("class","slideLeft2"),void setTimeout((()=>{n.style.display="none",t.style.display="flex"}),500)),h.onclick=()=>(a.removeAttribute("class"),"flex"===o.style.display?(o.removeAttribute("class"),o.setAttribute("class","down2"),a.setAttribute("class","rotate"),void setTimeout((()=>{o.style.display="none"}),1e3)):"none"===o.style.display?(o.style.display="flex",o.setAttribute("class","up1"),void a.setAttribute("class","return")):void 0),u.onclick=()=>function(){const e=document.querySelector("html"),t=document.querySelector("body"),n=document.getElementById("container"),s=document.querySelector(".content"),r=(document.querySelector("nav"),document.querySelector(".header")),o=document.getElementById("homePage"),a=document.querySelectorAll("select"),i=(document.getElementById("settings-options"),document.getElementById("form-input-project"),document.querySelector("#calendarPage")),l=document.querySelectorAll(".card"),d=document.querySelectorAll(".add_task"),h=document.querySelectorAll(".quantity"),u=document.querySelectorAll(".task"),c=document.querySelector("footer"),g=document.querySelectorAll("svg"),m=document.getElementById("submit-name-project");let y,f="rgb(48, 48, 48)",p="#3e3e3e",_="#FFFFFF",D="#f7fcff",v="rgba(0, 0, 0, 0.1)";t.style.backgroundColor!=f?y=!0:t.style.backgroundColor!==D&&(y=!1),y?(e.style.backgroundColor=f,t.style.backgroundColor=f,n.style.backgroundColor="#424242",n.style.color=_,s.style.backgroundColor=p,o.style.backgroundColor=p,o.style.color=_,i.style.backgroundColor=p,i.style.color=_,r.style.color=_,a.forEach((e=>{e.style.color=_,e.style.background=v})),l.forEach((e=>{e.style.backgroundColor="#404040"})),d.forEach((e=>{e.style.backgroundColor=v,e.style.color=_})),h.forEach((e=>{e.style.backgroundColor=v,e.style.color=_})),u.forEach((e=>{e.style.backgroundColor="rgba(151, 151, 151, 0.4)",e.style.border="none",e.style.color="white"})),c.style.color=_,g.forEach((e=>{e.style.color=_})),m.style.backgroundColor=v):!1===y&&(e.style.backgroundColor=D,t.style.backgroundColor=D,n.style.backgroundColor="white",n.style.color="black",s.style.backgroundColor="rgba(250,252,252,0.4)",o.style.backgroundColor="rgba(250,252,252,0.4)",o.style.color="black",i.style.backgroundColor="rgba(250,252,252,0.4)",i.style.color="black",r.style.color="black",a.forEach((e=>{e.style.color="black",e.style.background="rgba(174,214,241,0.1)"})),l.forEach((e=>{e.style.backgroundColor="rgba(174,214,241,0.03)"})),d.forEach((e=>{e.style.backgroundColor="rgba(174,214,241,0.1)",e.style.color="black"})),h.forEach((e=>{e.style.backgroundColor="rgba(174,214,241,0.1)",e.style.color="black"})),u.forEach((e=>{e.style.backgroundColor="white",e.style.color="black"})),c.style.color="black",g.forEach((e=>{e.style.color="black"})),m.style.backgroundColor="rgb(174,214,241)")}()})(),function(){function e(){0!==arguments.length&&this._construct(arguments)}e.version="v1.4.4",e.prototype._construct=function(e){if(e=this._parseArguments(e),this._setTarget(e.target),this._init(e.options),this._initTarget(),this._setDate(null!==e.date?e.date:this._target.dataset.hasOwnProperty("date")?this._target.dataset.date:new Date),!this._now)throw new Error("jsCalendar: Date is outside range.");this._create(),this._update()},e.prototype.languages={en:{months:["January","February","March","April","May","June","July","August","September","October","November","December"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],_dateStringParser:function(t,n){return e._defaultDateStringParser(t,n,this)},_dayStringParser:function(t,n){return e._defaultDayStringParser(t,n,this)}}},e.prototype._init=function(e){this._elements={},this._events={},this._events.date=[],this._events.month=[],this._events.day_render=[],this._events.date_render=[],this._events.month_render=[],this._now=null,this._date=null,this._selected=[],this.language={},this._parseOptions(e)},e.prototype._parseArguments=function(e){var t={target:null,date:null,options:{}};if(0===e.length)throw new Error("jsCalendar: No parameters were given.");if(1===e.length)if(("object"==typeof HTMLElement?e[0]instanceof HTMLElement:e[0])&&"object"==typeof e[0]&&null!==e[0]&&1===e[0].nodeType&&"string"==typeof e[0].nodeName||"string"==typeof e[0])t.target=e[0];else{if(t.options=e[0],void 0===e[0].target)throw new Error("jsCalendar: Not target was given.");t.target=e[0].target,void 0!==e[0].date&&(t.date=e[0].date)}else t.target=e[0],e.length>=2&&(t.date=e[1]),e.length>=3&&(t.options=e[2]);return t},e.options={language:"en",zeroFill:!1,monthFormat:"month",dayFormat:"D",firstDayOfTheWeek:1,navigator:!0,navigatorPosition:"both",min:!1,max:!1,onMonthRender:!1,onDayRender:!1,onDateRender:!1},e.prototype._parseOptions=function(n){this._options={};var s={};for(var r in e.options)e.options.hasOwnProperty(r)&&(this._options[r]=e.options[r]),n.hasOwnProperty(r)?s[r]=n[r]:this._target.dataset.hasOwnProperty(r)&&(s[r]=this._target.dataset[r]);void 0!==s.zeroFill&&("false"!==s.zeroFill&&s.zeroFill?this._options.zeroFill=!0:this._options.zeroFill=!1),void 0!==s.monthFormat&&(this._options.monthFormat=s.monthFormat),void 0!==s.dayFormat&&(this._options.dayFormat=s.dayFormat),void 0!==s.navigator&&("false"!==s.navigator&&s.navigator?this._options.navigator=!0:this._options.navigator=!1),void 0!==s.navigatorPosition&&(this._options.navigatorPosition=s.navigatorPosition),"string"==typeof s.language&&void 0!==this.languages[s.language]&&(this._options.language=s.language),this.setLanguage(this._options.language),void 0!==s.fdotw&&(s.firstDayOfTheWeek=s.fdotw),void 0!==s.firstDayOfTheWeek&&("number"==typeof s.firstDayOfTheWeek&&s.firstDayOfTheWeek>=1&&s.firstDayOfTheWeek<=7&&(this._options.firstDayOfTheWeek=s.firstDayOfTheWeek),"string"==typeof s.firstDayOfTheWeek&&(s.firstDayOfTheWeek.match(/^[1-7]$/)?this._options.firstDayOfTheWeek=parseInt(s.firstDayOfTheWeek,10):(this._options.firstDayOfTheWeek=this.language.days.indexOf(s.firstDayOfTheWeek)+1,(this._options.firstDayOfTheWeek<1||this._options.firstDayOfTheWeek>7)&&(this._options.firstDayOfTheWeek=1)))),void 0!==s.min&&"false"!==s.min&&!1!==s.min&&(this._options.min=t.parseDate(s.min)),void 0!==s.max&&"false"!==s.max&&!1!==s.max&&(this._options.max=t.parseDate(s.max)),void 0!==s.onMonthRender&&("string"==typeof s.onMonthRender&&"function"==typeof window[s.onMonthRender]?this._on("month_render",window[s.onMonthRender]):"function"==typeof s.onMonthRender&&this._on("month_render",s.onMonthRender)),void 0!==s.onDayRender&&("string"==typeof s.onDayRender&&"function"==typeof window[s.onDayRender]?this._on("day_render",window[s.onDayRender]):"function"==typeof s.onDayRender&&this._on("day_render",s.onDayRender)),void 0!==s.onDateRender&&("string"==typeof s.onDateRender&&"function"==typeof window[s.onDateRender]?this._on("date_render",window[s.onDateRender]):"function"==typeof s.onDateRender&&this._on("date_render",s.onDateRender))},e.prototype._setTarget=function(e){var s=t.getElement(e);if(!s)throw new Error("jsCalendar: Target was not found.");this._target=s;var r=this._target.id;r&&r.length>0&&(n["#"+r]=this)},e.prototype._initTarget=function(){this._target.className.length>0&&(this._target.className+=" "),this._target.className+="jsCalendar",this._elements.table=document.createElement("table"),this._elements.head=document.createElement("thead"),this._elements.table.appendChild(this._elements.head),this._elements.body=document.createElement("tbody"),this._elements.table.appendChild(this._elements.body),this._target.appendChild(this._elements.table)},e.prototype._isDateInRange=function(e){return!1===this._options.min&&!1===this._options.max||(e=t.parseDate(e),!(!1!==this._options.min&&this._options.min.getTime()>e.getTime()||!1!==this._options.max&&this._options.max.getTime()<e.getTime()))},e.prototype._setDate=function(e){e=t.parseDate(e),this._isDateInRange(e)&&(this._now=e,this._date=new Date(this._now.getFullYear(),this._now.getMonth(),1))},e.prototype._parseToDateString=function(e,t){var n=this.language;return t.replace(/(MONTH|month|MMM|mmm|mm|m|MM|M|DAY|day|DDD|ddd|dd|d|DD|D|YYYY|yyyy)/g,(function(t){return n.dateStringParser(t,e)}))},e.prototype._getVisibleMonth=function(e){e=void 0===e?this._date:t.parseDate(e);var n=new Date(e.getTime());n.setDate(1);var s=n.getDay()-(this._options.firstDayOfTheWeek-1);s<0&&(s+=7);var r=this.language,o=this._options.monthFormat.replace(/(MONTH|month|MMM|mmm|##|#|YYYY|yyyy)/g,(function(e){return r.dateStringParser(e,n)})),a=this._getVisibleDates(e),i=new Date(n.getYear()+1900,n.getMonth()+1,0).getDate(),l=-1;return n.getYear()===this._now.getYear()&&n.getMonth()===this._now.getMonth()&&(l=s+this._now.getDate()-1),{name:o,days:a,start:s+1,current:l,end:s+i}},e.prototype._getVisibleDates=function(e){e=void 0===e?this._date:t.parseDate(e);var n=[],s=new Date(e.getTime());s.setDate(1),s.setHours(0,0,0,0);var r=s.getDay()-(this._options.firstDayOfTheWeek-1);r<0&&(r+=7);for(var o=new Date(s.getTime());r>0;)o.setDate(o.getDate()-1),n.unshift(new Date(o.getTime())),r--;o=new Date(s.getTime());do{n.push(new Date(o.getTime())),o.setDate(o.getDate()+1)}while(1!==o.getDate());for(var a=42-n.length;a>0;)n.push(new Date(o.getTime())),o.setDate(o.getDate()+1),a--;return n},e.prototype._create=function(){var e,t,n=this;for(this._elements.created=!0,this._elements.headRows=[],e=0;e<2;e++)this._elements.headRows.push(document.createElement("tr")),this._elements.head.appendChild(this._elements.headRows[e]);var s=document.createElement("th");for(s.setAttribute("colspan",7),this._elements.headRows[0].className="jsCalendar-title-row",this._elements.headRows[0].appendChild(s),this._elements.headLeft=document.createElement("div"),this._elements.headLeft.className="jsCalendar-title-left",s.appendChild(this._elements.headLeft),this._elements.month=document.createElement("div"),this._elements.month.className="jsCalendar-title-name",s.appendChild(this._elements.month),this._elements.headRight=document.createElement("div"),this._elements.headRight.className="jsCalendar-title-right",s.appendChild(this._elements.headRight),this._options.navigator&&(this._elements.navLeft=document.createElement("div"),this._elements.navLeft.className="jsCalendar-nav-left",this._elements.navRight=document.createElement("div"),this._elements.navRight.className="jsCalendar-nav-right","left"===this._options.navigatorPosition?(this._elements.headLeft.appendChild(this._elements.navLeft),this._elements.headLeft.appendChild(this._elements.navRight)):"right"===this._options.navigatorPosition?(this._elements.headRight.appendChild(this._elements.navLeft),this._elements.headRight.appendChild(this._elements.navRight)):(this._elements.headLeft.appendChild(this._elements.navLeft),this._elements.headRight.appendChild(this._elements.navRight)),this._elements.navLeft.addEventListener("click",(function(e){n.previous();var t=new Date(n._date.getTime());t.setDate(1),n._eventFire("month",t,e)}),!1),this._elements.navRight.addEventListener("click",(function(e){n.next();var t=new Date(n._date.getTime());t.setDate(1),n._eventFire("month",t,e)}),!1)),this._elements.headRows[1].className="jsCalendar-week-days",s.className="jsCalendar-title",this._elements.days=[],e=0;e<7;e++)this._elements.days.push(document.createElement("th")),this._elements.headRows[1].appendChild(this._elements.days[this._elements.days.length-1]);for(this._elements.bodyRows=[],this._elements.bodyCols=[],e=0;e<6;e++)for(this._elements.bodyRows.push(document.createElement("tr")),this._elements.body.appendChild(this._elements.bodyRows[e]),t=0;t<7;t++)this._elements.bodyCols.push(document.createElement("td")),this._elements.bodyRows[e].appendChild(this._elements.bodyCols[7*e+t]),this._elements.bodyCols[7*e+t].addEventListener("click",function(e){return function(t){n._eventFire("date",n._active[e],t)}}(7*e+t),!1)},e.prototype._selectDates=function(e){e=e.slice();for(var n=0;n<e.length;n++)e[n]=t.parseDate(e[n]),e[n].setHours(0,0,0,0),e[n]=e[n].getTime();for(n=e.length-1;n>=0;n--)this._selected.indexOf(e[n])<0&&this._selected.push(e[n])},e.prototype._unselectDates=function(e){e=e.slice();for(var n=0;n<e.length;n++)e[n]=t.parseDate(e[n]),e[n].setHours(0,0,0,0),e[n]=e[n].getTime();var s;for(n=e.length-1;n>=0;n--)(s=this._selected.indexOf(e[n]))>=0&&this._selected.splice(s,1)},e.prototype._unselectAllDates=function(){for(;this._selected.length;)this._selected.pop()},e.prototype._update=function(){var e=this._getVisibleMonth(this._date);this._active=e.days.slice(),this._elements.month.textContent=e.name;for(var t,n,s=this._options.zeroFill?"0":"",r=e.days.length-1;r>=0;r--)t=e.days[r].getDate(),this._elements.bodyCols[r].textContent=t<10?s+t:t,this._selected.indexOf(e.days[r].getTime())>=0?this._elements.bodyCols[r].className="jsCalendar-selected":this._elements.bodyCols[r].removeAttribute("class");for(r=0;r<e.start-1;r++)this._elements.bodyCols[r].className="jsCalendar-previous";for(e.current>=0&&(this._elements.bodyCols[e.current].className.length>0?this._elements.bodyCols[e.current].className+=" jsCalendar-current":this._elements.bodyCols[e.current].className="jsCalendar-current"),r=e.end;r<e.days.length;r++)this._elements.bodyCols[r].className="jsCalendar-next";for(r=0;r<7;r++){var o=this;this._elements.days[r].textContent=this._options.dayFormat.replace(/(DAY|day|DDD|ddd|DD|dd|D)/g,(function(e){return o.language.dayStringParser(e,(r+o._options.firstDayOfTheWeek-1)%7)}))}if(this._events.month_render.length>0){var a=e.days[e.start];for(this._elements.month.removeAttribute("style"),n=0;n<this._events.month_render.length;n++)this._events.month_render[n].call(this,a.getMonth(),this._elements.month,{start:new Date(a.getTime()),end:new Date(a.getFullYear(),a.getMonth()+1,0,23,59,59,999),numberOfDays:e.end-e.start+1})}if(this._events.day_render.length>0)for(r=0;r<7;r++)for(this._elements.days[r].removeAttribute("style"),n=0;n<this._events.day_render.length;n++)this._events.day_render[n].call(this,(r+this._options.firstDayOfTheWeek-1)%7,this._elements.days[r],{position:r});if(this._events.date_render.length>0)for(r=0;r<e.days.length;r++)for(this._elements.bodyCols[r].removeAttribute("style"),n=0;n<this._events.date_render.length;n++)this._events.date_render[n].call(this,new Date(e.days[r].getTime()),this._elements.bodyCols[r],{isCurrent:e.current==r,isSelected:this._selected.indexOf(e.days[r].getTime())>=0,isPreviousMonth:r<e.start,isCurrentMonth:e.start<=r&&r<=e.end,isNextMonth:e.end<r,position:{x:r%7,y:Math.floor(r/7)}})},e.prototype._eventFire=function(e,t,n){if(this._events.hasOwnProperty(e))for(var s=0;s<this._events[e].length;s++)!function(e,s){setTimeout((function(){e.call(s,n,new Date(t.getTime()))}),0)}(this._events[e][s],this)},e.prototype._on=function(e,t){if("function"!=typeof t)throw new Error("jsCalendar: Invalid callback function.");return this._events[e].push(t),this},e.prototype.onDateClick=function(e){return this._on("date",e)},e.prototype.onMonthChange=function(e){return this._on("month",e)},e.prototype.onDayRender=function(e){return this._on("day_render",e)},e.prototype.onDateRender=function(e){return this._on("date_render",e)},e.prototype.onMonthRender=function(e){return this._on("month_render",e)},e.prototype.set=function(e){return this._setDate(e),this.refresh(),this},e.prototype.min=function(e){return this._options.min=!!e&&t.parseDate(e),this.refresh(),this},e.prototype.max=function(e){return this._options.max=!!e&&t.parseDate(e),this.refresh(),this},e.prototype.refresh=function(e){return void 0!==e&&this._isDateInRange(e)&&(this._date=t.parseDate(e)),!0===this._elements.created&&this._update(),this},e.prototype.next=function(e){"number"!=typeof e&&(e=1);var t=new Date(this._date.getFullYear(),this._date.getMonth()+e,1);return this._isDateInRange(t)?(this._date=t,this.refresh(),this):this},e.prototype.previous=function(e){"number"!=typeof e&&(e=1);var t=new Date(this._date.getFullYear(),this._date.getMonth()-e+1,0);return this._isDateInRange(t)?(this._date=t,this.refresh(),this):this},e.prototype.goto=function(e){return this.refresh(e),this},e.prototype.reset=function(){return this.refresh(this._now),this},e.prototype.select=function(e){return void 0===e||(e instanceof Array||(e=[e]),this._selectDates(e),this.refresh()),this},e.prototype.unselect=function(e){return void 0===e||(e instanceof Array||(e=[e]),this._unselectDates(e),this.refresh()),this},e.prototype.clearselect=function(){return this._unselectAllDates(),this.refresh(),this},e.prototype.clearSelected=e.prototype.clearselect,e.prototype.getSelected=function(e){"object"!=typeof e&&(e={});var t,n=this._selected.slice();if(e.sort&&(!0===e.sort?n.sort():"string"==typeof e.sort&&("asc"===e.sort.toLowerCase()?n.sort():"desc"===e.sort.toLowerCase()&&(n.sort(),n.reverse()))),e.type&&"string"==typeof e.type)if("date"===e.type.toLowerCase())for(t=n.length-1;t>=0;t--)n[t]=new Date(n[t]);else if("timestamp"!==e.type.toLowerCase())for(t=n.length-1;t>=0;t--)n[t]=this._parseToDateString(new Date(n[t]),e.type);return n},e.prototype.isSelected=function(e){return null!=e&&((e=t.parseDate(e)).setHours(0,0,0,0),e=e.getTime(),this._selected.indexOf(e)>=0)},e.prototype.isVisible=function(e){if(null==e)return!1;(e=t.parseDate(e)).setHours(0,0,0,0),e=e.getTime();var n=this._getVisibleDates();return n[0].getTime()<=e&&n[n.length-1].getTime()>=e},e.prototype.isInMonth=function(e){if(null==e)return!1;var n=t.parseDate(e);n.setHours(0,0,0,0),n.setDate(1);var s=t.parseDate(this._date);return s.setHours(0,0,0,0),s.setDate(1),n.getTime()===s.getTime()},e.prototype.setLanguage=function(e){if("string"!=typeof e)throw new Error("jsCalendar: Invalid language code.");if(void 0===this.languages[e])throw new Error("jsCalendar: Language not found.");this._options.language=e;var t=this.languages[e];return this.language.months=t.months,this.language.days=t.days,this.language.dateStringParser=t._dateStringParser,this.language.dayStringParser=t._dayStringParser,this.refresh(),this},e.autoFind=function(){for(var t=document.getElementsByClassName("auto-jsCalendar"),n=0;n<t.length;n++)"true"!==t[n].getAttribute("jsCalendar-loaded")&&(t[n].setAttribute("jsCalendar-loaded","true"),new e({target:t[n]}))};var t=e.tools={};t.parseDate=function(e,t){if(null==e||"now"===e)e=new Date;else if("string"==typeof e){if(null===(e=e.replace(/-/g,"/").match(/^(\d{1,2})\/(\d{1,2})\/(\d{4,4})$/i))){if(!t)throw new Error("jsCalendar: Failed to parse date.");return null}var n=parseInt(e[2],10)-1;if(!(e=new Date(e[3],n,e[1]))||e.getMonth()!==n){if(!t)throw new Error("jsCalendar: Date does not exist.");return null}}else if("number"==typeof e)e=new Date(e);else if(!(e instanceof Date)){if(!t)throw new Error("jsCalendar: Invalid date.");return null}return new Date(e.getTime())},t.stringToDate=t.parseDate,t.dateToString=function(t,n,s){var r=e.prototype.languages;return s&&r.hasOwnProperty(s)||(s="en"),e.prototype._parseToDateString.apply({language:{months:r[s].months,days:r[s].days,dateStringParser:r[s]._dateStringParser,dayStringParser:r[s]._dayStringParser}},[t,n])},t.getElement=function(e){if(!e)return null;if("string"==typeof e){if("#"===e[0])return document.getElementById(e.substring(1));if("."===e[0])return document.getElementsByClassName(e.substring(1))[0]}else if(e.tagName&&e.nodeName&&e.ownerDocument&&e.removeAttribute)return e;return null},e.new=function(){var t=new e;return t._construct(arguments),t};var n={};e.set=function(t,s){if(s instanceof e)return n[t]=s,!0;throw new Error("jsCalendar: The second parameter is not a jsCalendar.")},e.get=function(e){return n.hasOwnProperty(e)?n[e]:null},e.del=function(e){return!!n.hasOwnProperty(e)&&(delete n[e],!0)},e.addLanguage=function(t){if(void 0===t)throw new Error("jsCalendar: No language object was given.");if("string"!=typeof t.code)throw new Error("jsCalendar: Invalid language code.");if(!(t.months instanceof Array))throw new Error("jsCalendar: Invalid language months.");if(12!==t.months.length)throw new Error("jsCalendar: Invalid language months length.");if(!(t.days instanceof Array))throw new Error("jsCalendar: Invalid language days.");if(7!==t.days.length)throw new Error("jsCalendar: Invalid language days length.");e.prototype.languages[t.code]=t,t._dateStringParser=t.hasOwnProperty("dateStringParser")?function(n,s){return t.dateStringParser(n,s)||e._defaultDateStringParser(n,s,t)}:function(n,s){return e._defaultDateStringParser(n,s,t)},t._dayStringParser=t.hasOwnProperty("dayStringParser")?function(n,s){return t.dayStringParser(n,s)||e._defaultDayStringParser(n,s,t)}:function(n,s){return e._defaultDayStringParser(n,s,t)}},e._defaultDateStringParser=function(e,t,n){switch(e){case"MONTH":case"month":return n.months[t.getMonth()];case"MMM":case"mmm":return n.months[t.getMonth()].substring(0,3);case"mm":return n.months[t.getMonth()].substring(0,2);case"m":return n.months[t.getMonth()].substring(0,1);case"MM":case"##":return(t.getMonth()<9?"0":"")+(t.getMonth()+1);case"M":case"#":return t.getMonth()+1;case"DAY":case"day":return n.days[t.getDay()];case"DDD":case"ddd":return n.days[t.getDay()].substring(0,3);case"dd":return n.days[t.getDay()].substring(0,2);case"d":return n.days[t.getDay()].substring(0,1);case"DD":return(t.getDate()<=9?"0":"")+t.getDate();case"D":return t.getDate();case"YYYY":case"yyyy":return t.getYear()+1900}},e._defaultDayStringParser=function(e,t,n){switch(e){case"DAY":case"day":return n.days[t];case"DDD":case"ddd":return n.days[t].substring(0,3);case"DD":case"dd":return n.days[t].substring(0,2);case"D":return n.days[t].substring(0,1)}},function(){if(void 0!==window.jsCalendar_language2load){for(;window.jsCalendar_language2load.length;)setTimeout(function(t){return function(){e.addLanguage(t)}}(window.jsCalendar_language2load.pop()),0);delete window.jsCalendar_language2load}}(),window.addEventListener("load",(function(){e.autoFind()}),!1)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,