(()=>{"use strict";document.getElementById("home"),document.getElementById("add_project");const e=document.getElementById("calendar"),t=(document.getElementById("settings"),document.getElementById("login"),document.querySelector(".content"),document.querySelector("#calendarPage")),n=document.querySelector("#homePage"),o=document.getElementById("plus"),s=document.getElementById("form-input-project"),r=document.getElementById("settings-options"),a=document.getElementById("svg-config");function i(){const e=document.getElementById("checkBox"),t=document.getElementById("homespan"),n=document.getElementById("addprojectspan"),o=document.getElementById("spancalendar"),s=document.getElementById("loginsettings"),r=document.getElementById("loginspan"),a=document.getElementById("todotext"),i=document.getElementById("inprogresstext"),l=document.getElementById("completedtext"),d=document.getElementById("projectdefault"),h=document.getElementById("dayoption"),c=document.getElementById("weekoption"),u=document.getElementById("yearoption"),g=document.getElementById("selectdefaultweek"),m=document.getElementById("labelinput"),y=document.getElementById("input-project"),p=document.getElementById("submit-name-project");e.checked?(t.textContent="Casa",n.textContent="Añadir proyecto",o.textContent="Calendario",s.textContent="Configuraciones",r.textContent="Iniciar sesion",a.textContent="Para hacer",i.textContent="En progreso",l.textContent="Completado",d.textContent="Proyectos",h.textContent="Dia",c.textContent="Semana",u.textContent="Año",g.textContent="Esta semana",m.textContent="Nombre del proyecto",y.setAttribute("placeholder","Ej: Mi rutina de gimnasio..."),p.setAttribute("value","Hecho")):0==e.checked&&(t.textContent="Home",n.textContent="Add project",o.textContent="Calendar",s.textContent="Configuration",r.textContent="Log in",a.textContent="To do",i.textContent="In progress",l.textContent="Completed",d.textContent="Projects",h.textContent="Day",c.textContent="Week",u.textContent="Year",g.textContent="This week",m.textContent="Name of the project",y.setAttribute("placeholder","Ex: My gym rutine..."),p.setAttribute("value","Done"))}function l(){const e=document.getElementById("checkBoxTheme"),t=document.querySelector("html"),n=document.querySelector("body"),o=document.getElementById("container"),s=document.querySelector(".content"),r=(document.querySelector("nav"),document.querySelector(".header")),a=document.getElementById("homePage"),i=document.querySelectorAll("select"),l=(document.getElementById("settings-options"),document.getElementById("form-input-project"),document.querySelector("#calendarPage")),d=document.querySelectorAll(".card"),h=document.querySelectorAll(".add_task"),c=document.querySelectorAll(".quantity"),u=document.querySelectorAll(".task"),g=document.querySelector("footer"),m=document.querySelectorAll("svg"),y=document.getElementById("submit-name-project"),p=document.getElementById("popup-login");let f="rgb(48, 48, 48)",_="#3e3e3e",D="#FFFFFF",v="#f7fcff",b="rgba(0, 0, 0, 0.1)";e.checked?(t.style.backgroundColor=f,n.style.backgroundColor=f,o.style.backgroundColor="#424242",o.style.color=D,s.style.backgroundColor=_,a.style.backgroundColor=_,a.style.color=D,l.style.backgroundColor=_,l.style.color=D,r.style.color=D,i.forEach((e=>{e.style.color=D,e.style.background=b})),d.forEach((e=>{e.style.backgroundColor="#404040"})),h.forEach((e=>{e.style.backgroundColor=b,e.style.color=D})),c.forEach((e=>{e.style.backgroundColor=b,e.style.color=D})),u.forEach((e=>{e.style.backgroundColor="rgba(151, 151, 151, 0.4)",e.style.border="none",e.style.color="white"})),g.style.color=D,m.forEach((e=>{e.style.color=D})),y.style.backgroundColor=b,p.style.backgroundColor=f,p.style.color=D):0==e.checked&&(t.style.backgroundColor=v,n.style.backgroundColor=v,o.style.backgroundColor="white",o.style.color="black",s.style.backgroundColor="rgba(250,252,252,0.4)",a.style.backgroundColor="rgba(250,252,252,0.4)",a.style.color="black",l.style.backgroundColor="rgba(250,252,252,0.4)",l.style.color="black",r.style.color="black",i.forEach((e=>{e.style.color="black",e.style.background="rgba(174,214,241,0.1)"})),d.forEach((e=>{e.style.backgroundColor="rgba(174,214,241,0.03)"})),h.forEach((e=>{e.style.backgroundColor="rgba(174,214,241,0.1)",e.style.color="black"})),c.forEach((e=>{e.style.backgroundColor="rgba(174,214,241,0.1)",e.style.color="black"})),u.forEach((e=>{e.style.backgroundColor="white",e.style.color="black"})),g.style.color="black",m.forEach((e=>{e.style.color="black"})),y.style.backgroundColor="rgb(174,214,241)",p.style.backgroundColor="white",p.style.color="black")}document.getElementById("night-mode"),n.style.display="block",r.style.display="none";const d=document.getElementById("home"),h=document.getElementById("add_project"),c=document.getElementById("calendar"),u=document.getElementById("settings"),g=document.getElementById("login"),m=document.getElementById("checkBoxTheme"),y=document.getElementById("checkBox"),p=(document.querySelector(".content"),document.querySelector("#calendarPage"),document.querySelector("#homePage"),document.getElementById("plus"),document.querySelector(".list"),document.getElementById("form-input-project"),document.getElementById("popup-login")),f=document.getElementById("background-popup"),_=document.getElementById("close-pop-up"),D=document.getElementById("demoUser");function v(){f.style.display="none"}d.onclick=()=>{"block"!=n.style.display&&(t.removeAttribute("class"),n.removeAttribute("class"),n.setAttribute("class","slideLeft2"),t.setAttribute("class","slideLeft"),setTimeout((()=>{t.style.display="none",n.style.display="block"}),500))},h.onclick=()=>{"rotate"===o.getAttribute("class")?(o.removeAttribute("class"),o.setAttribute("class","return"),s.removeAttribute("class"),s.setAttribute("class","up"),e.removeAttribute("class"),setTimeout((()=>{s.style.display="none"}),1e3)):(null==o.getAttribute("class")||"return"===o.getAttribute("class"))&&(o.removeAttribute("class"),o.setAttribute("class","rotate"),s.style.display="flex",s.removeAttribute("class"),s.setAttribute("class","down"),e.removeAttribute("class"),e.setAttribute("class","down1"))},c.onclick=()=>(n.setAttribute("class","slideLeft"),t.setAttribute("class","slideLeft2"),void setTimeout((()=>{n.style.display="none",t.style.display="flex"}),500)),u.onclick=()=>(a.removeAttribute("class"),"flex"===r.style.display?(r.removeAttribute("class"),r.setAttribute("class","down2"),a.setAttribute("class","rotate"),void setTimeout((()=>{r.style.display="none"}),1e3)):"none"===r.style.display?(r.style.display="flex",r.setAttribute("class","up1"),void a.setAttribute("class","return")):void 0),m.onclick=()=>l(),y.onclick=()=>i(),g.onclick=()=>(f.style.display="block",p.style.display="flex",void p.setAttribute("class","fromtop")),_.onclick=()=>v(),D.onclick=()=>function(e){switch(e){case"demo_user"==e:v(),localStorage.setItem("user","0");break;case"google_user"==e:localStorage.setItem("user","1");break;case e="log-in-user":localStorage.setItem("user","2")}"demo_user"==e&&(localStorage.getItem("user")||localStorage.setItem("user","0"))}("demo_user"),window.onload=i(),window.onload=l()})(),function(){function e(){0!==arguments.length&&this._construct(arguments)}e.version="v1.4.4",e.prototype._construct=function(e){if(e=this._parseArguments(e),this._setTarget(e.target),this._init(e.options),this._initTarget(),this._setDate(null!==e.date?e.date:this._target.dataset.hasOwnProperty("date")?this._target.dataset.date:new Date),!this._now)throw new Error("jsCalendar: Date is outside range.");this._create(),this._update()},e.prototype.languages={en:{months:["January","February","March","April","May","June","July","August","September","October","November","December"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],_dateStringParser:function(t,n){return e._defaultDateStringParser(t,n,this)},_dayStringParser:function(t,n){return e._defaultDayStringParser(t,n,this)}}},e.prototype._init=function(e){this._elements={},this._events={},this._events.date=[],this._events.month=[],this._events.day_render=[],this._events.date_render=[],this._events.month_render=[],this._now=null,this._date=null,this._selected=[],this.language={},this._parseOptions(e)},e.prototype._parseArguments=function(e){var t={target:null,date:null,options:{}};if(0===e.length)throw new Error("jsCalendar: No parameters were given.");if(1===e.length)if(("object"==typeof HTMLElement?e[0]instanceof HTMLElement:e[0])&&"object"==typeof e[0]&&null!==e[0]&&1===e[0].nodeType&&"string"==typeof e[0].nodeName||"string"==typeof e[0])t.target=e[0];else{if(t.options=e[0],void 0===e[0].target)throw new Error("jsCalendar: Not target was given.");t.target=e[0].target,void 0!==e[0].date&&(t.date=e[0].date)}else t.target=e[0],e.length>=2&&(t.date=e[1]),e.length>=3&&(t.options=e[2]);return t},e.options={language:"en",zeroFill:!1,monthFormat:"month",dayFormat:"D",firstDayOfTheWeek:1,navigator:!0,navigatorPosition:"both",min:!1,max:!1,onMonthRender:!1,onDayRender:!1,onDateRender:!1},e.prototype._parseOptions=function(n){this._options={};var o={};for(var s in e.options)e.options.hasOwnProperty(s)&&(this._options[s]=e.options[s]),n.hasOwnProperty(s)?o[s]=n[s]:this._target.dataset.hasOwnProperty(s)&&(o[s]=this._target.dataset[s]);void 0!==o.zeroFill&&("false"!==o.zeroFill&&o.zeroFill?this._options.zeroFill=!0:this._options.zeroFill=!1),void 0!==o.monthFormat&&(this._options.monthFormat=o.monthFormat),void 0!==o.dayFormat&&(this._options.dayFormat=o.dayFormat),void 0!==o.navigator&&("false"!==o.navigator&&o.navigator?this._options.navigator=!0:this._options.navigator=!1),void 0!==o.navigatorPosition&&(this._options.navigatorPosition=o.navigatorPosition),"string"==typeof o.language&&void 0!==this.languages[o.language]&&(this._options.language=o.language),this.setLanguage(this._options.language),void 0!==o.fdotw&&(o.firstDayOfTheWeek=o.fdotw),void 0!==o.firstDayOfTheWeek&&("number"==typeof o.firstDayOfTheWeek&&o.firstDayOfTheWeek>=1&&o.firstDayOfTheWeek<=7&&(this._options.firstDayOfTheWeek=o.firstDayOfTheWeek),"string"==typeof o.firstDayOfTheWeek&&(o.firstDayOfTheWeek.match(/^[1-7]$/)?this._options.firstDayOfTheWeek=parseInt(o.firstDayOfTheWeek,10):(this._options.firstDayOfTheWeek=this.language.days.indexOf(o.firstDayOfTheWeek)+1,(this._options.firstDayOfTheWeek<1||this._options.firstDayOfTheWeek>7)&&(this._options.firstDayOfTheWeek=1)))),void 0!==o.min&&"false"!==o.min&&!1!==o.min&&(this._options.min=t.parseDate(o.min)),void 0!==o.max&&"false"!==o.max&&!1!==o.max&&(this._options.max=t.parseDate(o.max)),void 0!==o.onMonthRender&&("string"==typeof o.onMonthRender&&"function"==typeof window[o.onMonthRender]?this._on("month_render",window[o.onMonthRender]):"function"==typeof o.onMonthRender&&this._on("month_render",o.onMonthRender)),void 0!==o.onDayRender&&("string"==typeof o.onDayRender&&"function"==typeof window[o.onDayRender]?this._on("day_render",window[o.onDayRender]):"function"==typeof o.onDayRender&&this._on("day_render",o.onDayRender)),void 0!==o.onDateRender&&("string"==typeof o.onDateRender&&"function"==typeof window[o.onDateRender]?this._on("date_render",window[o.onDateRender]):"function"==typeof o.onDateRender&&this._on("date_render",o.onDateRender))},e.prototype._setTarget=function(e){var o=t.getElement(e);if(!o)throw new Error("jsCalendar: Target was not found.");this._target=o;var s=this._target.id;s&&s.length>0&&(n["#"+s]=this)},e.prototype._initTarget=function(){this._target.className.length>0&&(this._target.className+=" "),this._target.className+="jsCalendar",this._elements.table=document.createElement("table"),this._elements.head=document.createElement("thead"),this._elements.table.appendChild(this._elements.head),this._elements.body=document.createElement("tbody"),this._elements.table.appendChild(this._elements.body),this._target.appendChild(this._elements.table)},e.prototype._isDateInRange=function(e){return!1===this._options.min&&!1===this._options.max||(e=t.parseDate(e),!(!1!==this._options.min&&this._options.min.getTime()>e.getTime()||!1!==this._options.max&&this._options.max.getTime()<e.getTime()))},e.prototype._setDate=function(e){e=t.parseDate(e),this._isDateInRange(e)&&(this._now=e,this._date=new Date(this._now.getFullYear(),this._now.getMonth(),1))},e.prototype._parseToDateString=function(e,t){var n=this.language;return t.replace(/(MONTH|month|MMM|mmm|mm|m|MM|M|DAY|day|DDD|ddd|dd|d|DD|D|YYYY|yyyy)/g,(function(t){return n.dateStringParser(t,e)}))},e.prototype._getVisibleMonth=function(e){e=void 0===e?this._date:t.parseDate(e);var n=new Date(e.getTime());n.setDate(1);var o=n.getDay()-(this._options.firstDayOfTheWeek-1);o<0&&(o+=7);var s=this.language,r=this._options.monthFormat.replace(/(MONTH|month|MMM|mmm|##|#|YYYY|yyyy)/g,(function(e){return s.dateStringParser(e,n)})),a=this._getVisibleDates(e),i=new Date(n.getYear()+1900,n.getMonth()+1,0).getDate(),l=-1;return n.getYear()===this._now.getYear()&&n.getMonth()===this._now.getMonth()&&(l=o+this._now.getDate()-1),{name:r,days:a,start:o+1,current:l,end:o+i}},e.prototype._getVisibleDates=function(e){e=void 0===e?this._date:t.parseDate(e);var n=[],o=new Date(e.getTime());o.setDate(1),o.setHours(0,0,0,0);var s=o.getDay()-(this._options.firstDayOfTheWeek-1);s<0&&(s+=7);for(var r=new Date(o.getTime());s>0;)r.setDate(r.getDate()-1),n.unshift(new Date(r.getTime())),s--;r=new Date(o.getTime());do{n.push(new Date(r.getTime())),r.setDate(r.getDate()+1)}while(1!==r.getDate());for(var a=42-n.length;a>0;)n.push(new Date(r.getTime())),r.setDate(r.getDate()+1),a--;return n},e.prototype._create=function(){var e,t,n=this;for(this._elements.created=!0,this._elements.headRows=[],e=0;e<2;e++)this._elements.headRows.push(document.createElement("tr")),this._elements.head.appendChild(this._elements.headRows[e]);var o=document.createElement("th");for(o.setAttribute("colspan",7),this._elements.headRows[0].className="jsCalendar-title-row",this._elements.headRows[0].appendChild(o),this._elements.headLeft=document.createElement("div"),this._elements.headLeft.className="jsCalendar-title-left",o.appendChild(this._elements.headLeft),this._elements.month=document.createElement("div"),this._elements.month.className="jsCalendar-title-name",o.appendChild(this._elements.month),this._elements.headRight=document.createElement("div"),this._elements.headRight.className="jsCalendar-title-right",o.appendChild(this._elements.headRight),this._options.navigator&&(this._elements.navLeft=document.createElement("div"),this._elements.navLeft.className="jsCalendar-nav-left",this._elements.navRight=document.createElement("div"),this._elements.navRight.className="jsCalendar-nav-right","left"===this._options.navigatorPosition?(this._elements.headLeft.appendChild(this._elements.navLeft),this._elements.headLeft.appendChild(this._elements.navRight)):"right"===this._options.navigatorPosition?(this._elements.headRight.appendChild(this._elements.navLeft),this._elements.headRight.appendChild(this._elements.navRight)):(this._elements.headLeft.appendChild(this._elements.navLeft),this._elements.headRight.appendChild(this._elements.navRight)),this._elements.navLeft.addEventListener("click",(function(e){n.previous();var t=new Date(n._date.getTime());t.setDate(1),n._eventFire("month",t,e)}),!1),this._elements.navRight.addEventListener("click",(function(e){n.next();var t=new Date(n._date.getTime());t.setDate(1),n._eventFire("month",t,e)}),!1)),this._elements.headRows[1].className="jsCalendar-week-days",o.className="jsCalendar-title",this._elements.days=[],e=0;e<7;e++)this._elements.days.push(document.createElement("th")),this._elements.headRows[1].appendChild(this._elements.days[this._elements.days.length-1]);for(this._elements.bodyRows=[],this._elements.bodyCols=[],e=0;e<6;e++)for(this._elements.bodyRows.push(document.createElement("tr")),this._elements.body.appendChild(this._elements.bodyRows[e]),t=0;t<7;t++)this._elements.bodyCols.push(document.createElement("td")),this._elements.bodyRows[e].appendChild(this._elements.bodyCols[7*e+t]),this._elements.bodyCols[7*e+t].addEventListener("click",function(e){return function(t){n._eventFire("date",n._active[e],t)}}(7*e+t),!1)},e.prototype._selectDates=function(e){e=e.slice();for(var n=0;n<e.length;n++)e[n]=t.parseDate(e[n]),e[n].setHours(0,0,0,0),e[n]=e[n].getTime();for(n=e.length-1;n>=0;n--)this._selected.indexOf(e[n])<0&&this._selected.push(e[n])},e.prototype._unselectDates=function(e){e=e.slice();for(var n=0;n<e.length;n++)e[n]=t.parseDate(e[n]),e[n].setHours(0,0,0,0),e[n]=e[n].getTime();var o;for(n=e.length-1;n>=0;n--)(o=this._selected.indexOf(e[n]))>=0&&this._selected.splice(o,1)},e.prototype._unselectAllDates=function(){for(;this._selected.length;)this._selected.pop()},e.prototype._update=function(){var e=this._getVisibleMonth(this._date);this._active=e.days.slice(),this._elements.month.textContent=e.name;for(var t,n,o=this._options.zeroFill?"0":"",s=e.days.length-1;s>=0;s--)t=e.days[s].getDate(),this._elements.bodyCols[s].textContent=t<10?o+t:t,this._selected.indexOf(e.days[s].getTime())>=0?this._elements.bodyCols[s].className="jsCalendar-selected":this._elements.bodyCols[s].removeAttribute("class");for(s=0;s<e.start-1;s++)this._elements.bodyCols[s].className="jsCalendar-previous";for(e.current>=0&&(this._elements.bodyCols[e.current].className.length>0?this._elements.bodyCols[e.current].className+=" jsCalendar-current":this._elements.bodyCols[e.current].className="jsCalendar-current"),s=e.end;s<e.days.length;s++)this._elements.bodyCols[s].className="jsCalendar-next";for(s=0;s<7;s++){var r=this;this._elements.days[s].textContent=this._options.dayFormat.replace(/(DAY|day|DDD|ddd|DD|dd|D)/g,(function(e){return r.language.dayStringParser(e,(s+r._options.firstDayOfTheWeek-1)%7)}))}if(this._events.month_render.length>0){var a=e.days[e.start];for(this._elements.month.removeAttribute("style"),n=0;n<this._events.month_render.length;n++)this._events.month_render[n].call(this,a.getMonth(),this._elements.month,{start:new Date(a.getTime()),end:new Date(a.getFullYear(),a.getMonth()+1,0,23,59,59,999),numberOfDays:e.end-e.start+1})}if(this._events.day_render.length>0)for(s=0;s<7;s++)for(this._elements.days[s].removeAttribute("style"),n=0;n<this._events.day_render.length;n++)this._events.day_render[n].call(this,(s+this._options.firstDayOfTheWeek-1)%7,this._elements.days[s],{position:s});if(this._events.date_render.length>0)for(s=0;s<e.days.length;s++)for(this._elements.bodyCols[s].removeAttribute("style"),n=0;n<this._events.date_render.length;n++)this._events.date_render[n].call(this,new Date(e.days[s].getTime()),this._elements.bodyCols[s],{isCurrent:e.current==s,isSelected:this._selected.indexOf(e.days[s].getTime())>=0,isPreviousMonth:s<e.start,isCurrentMonth:e.start<=s&&s<=e.end,isNextMonth:e.end<s,position:{x:s%7,y:Math.floor(s/7)}})},e.prototype._eventFire=function(e,t,n){if(this._events.hasOwnProperty(e))for(var o=0;o<this._events[e].length;o++)!function(e,o){setTimeout((function(){e.call(o,n,new Date(t.getTime()))}),0)}(this._events[e][o],this)},e.prototype._on=function(e,t){if("function"!=typeof t)throw new Error("jsCalendar: Invalid callback function.");return this._events[e].push(t),this},e.prototype.onDateClick=function(e){return this._on("date",e)},e.prototype.onMonthChange=function(e){return this._on("month",e)},e.prototype.onDayRender=function(e){return this._on("day_render",e)},e.prototype.onDateRender=function(e){return this._on("date_render",e)},e.prototype.onMonthRender=function(e){return this._on("month_render",e)},e.prototype.set=function(e){return this._setDate(e),this.refresh(),this},e.prototype.min=function(e){return this._options.min=!!e&&t.parseDate(e),this.refresh(),this},e.prototype.max=function(e){return this._options.max=!!e&&t.parseDate(e),this.refresh(),this},e.prototype.refresh=function(e){return void 0!==e&&this._isDateInRange(e)&&(this._date=t.parseDate(e)),!0===this._elements.created&&this._update(),this},e.prototype.next=function(e){"number"!=typeof e&&(e=1);var t=new Date(this._date.getFullYear(),this._date.getMonth()+e,1);return this._isDateInRange(t)?(this._date=t,this.refresh(),this):this},e.prototype.previous=function(e){"number"!=typeof e&&(e=1);var t=new Date(this._date.getFullYear(),this._date.getMonth()-e+1,0);return this._isDateInRange(t)?(this._date=t,this.refresh(),this):this},e.prototype.goto=function(e){return this.refresh(e),this},e.prototype.reset=function(){return this.refresh(this._now),this},e.prototype.select=function(e){return void 0===e||(e instanceof Array||(e=[e]),this._selectDates(e),this.refresh()),this},e.prototype.unselect=function(e){return void 0===e||(e instanceof Array||(e=[e]),this._unselectDates(e),this.refresh()),this},e.prototype.clearselect=function(){return this._unselectAllDates(),this.refresh(),this},e.prototype.clearSelected=e.prototype.clearselect,e.prototype.getSelected=function(e){"object"!=typeof e&&(e={});var t,n=this._selected.slice();if(e.sort&&(!0===e.sort?n.sort():"string"==typeof e.sort&&("asc"===e.sort.toLowerCase()?n.sort():"desc"===e.sort.toLowerCase()&&(n.sort(),n.reverse()))),e.type&&"string"==typeof e.type)if("date"===e.type.toLowerCase())for(t=n.length-1;t>=0;t--)n[t]=new Date(n[t]);else if("timestamp"!==e.type.toLowerCase())for(t=n.length-1;t>=0;t--)n[t]=this._parseToDateString(new Date(n[t]),e.type);return n},e.prototype.isSelected=function(e){return null!=e&&((e=t.parseDate(e)).setHours(0,0,0,0),e=e.getTime(),this._selected.indexOf(e)>=0)},e.prototype.isVisible=function(e){if(null==e)return!1;(e=t.parseDate(e)).setHours(0,0,0,0),e=e.getTime();var n=this._getVisibleDates();return n[0].getTime()<=e&&n[n.length-1].getTime()>=e},e.prototype.isInMonth=function(e){if(null==e)return!1;var n=t.parseDate(e);n.setHours(0,0,0,0),n.setDate(1);var o=t.parseDate(this._date);return o.setHours(0,0,0,0),o.setDate(1),n.getTime()===o.getTime()},e.prototype.setLanguage=function(e){if("string"!=typeof e)throw new Error("jsCalendar: Invalid language code.");if(void 0===this.languages[e])throw new Error("jsCalendar: Language not found.");this._options.language=e;var t=this.languages[e];return this.language.months=t.months,this.language.days=t.days,this.language.dateStringParser=t._dateStringParser,this.language.dayStringParser=t._dayStringParser,this.refresh(),this},e.autoFind=function(){for(var t=document.getElementsByClassName("auto-jsCalendar"),n=0;n<t.length;n++)"true"!==t[n].getAttribute("jsCalendar-loaded")&&(t[n].setAttribute("jsCalendar-loaded","true"),new e({target:t[n]}))};var t=e.tools={};t.parseDate=function(e,t){if(null==e||"now"===e)e=new Date;else if("string"==typeof e){if(null===(e=e.replace(/-/g,"/").match(/^(\d{1,2})\/(\d{1,2})\/(\d{4,4})$/i))){if(!t)throw new Error("jsCalendar: Failed to parse date.");return null}var n=parseInt(e[2],10)-1;if(!(e=new Date(e[3],n,e[1]))||e.getMonth()!==n){if(!t)throw new Error("jsCalendar: Date does not exist.");return null}}else if("number"==typeof e)e=new Date(e);else if(!(e instanceof Date)){if(!t)throw new Error("jsCalendar: Invalid date.");return null}return new Date(e.getTime())},t.stringToDate=t.parseDate,t.dateToString=function(t,n,o){var s=e.prototype.languages;return o&&s.hasOwnProperty(o)||(o="en"),e.prototype._parseToDateString.apply({language:{months:s[o].months,days:s[o].days,dateStringParser:s[o]._dateStringParser,dayStringParser:s[o]._dayStringParser}},[t,n])},t.getElement=function(e){if(!e)return null;if("string"==typeof e){if("#"===e[0])return document.getElementById(e.substring(1));if("."===e[0])return document.getElementsByClassName(e.substring(1))[0]}else if(e.tagName&&e.nodeName&&e.ownerDocument&&e.removeAttribute)return e;return null},e.new=function(){var t=new e;return t._construct(arguments),t};var n={};e.set=function(t,o){if(o instanceof e)return n[t]=o,!0;throw new Error("jsCalendar: The second parameter is not a jsCalendar.")},e.get=function(e){return n.hasOwnProperty(e)?n[e]:null},e.del=function(e){return!!n.hasOwnProperty(e)&&(delete n[e],!0)},e.addLanguage=function(t){if(void 0===t)throw new Error("jsCalendar: No language object was given.");if("string"!=typeof t.code)throw new Error("jsCalendar: Invalid language code.");if(!(t.months instanceof Array))throw new Error("jsCalendar: Invalid language months.");if(12!==t.months.length)throw new Error("jsCalendar: Invalid language months length.");if(!(t.days instanceof Array))throw new Error("jsCalendar: Invalid language days.");if(7!==t.days.length)throw new Error("jsCalendar: Invalid language days length.");e.prototype.languages[t.code]=t,t._dateStringParser=t.hasOwnProperty("dateStringParser")?function(n,o){return t.dateStringParser(n,o)||e._defaultDateStringParser(n,o,t)}:function(n,o){return e._defaultDateStringParser(n,o,t)},t._dayStringParser=t.hasOwnProperty("dayStringParser")?function(n,o){return t.dayStringParser(n,o)||e._defaultDayStringParser(n,o,t)}:function(n,o){return e._defaultDayStringParser(n,o,t)}},e._defaultDateStringParser=function(e,t,n){switch(e){case"MONTH":case"month":return n.months[t.getMonth()];case"MMM":case"mmm":return n.months[t.getMonth()].substring(0,3);case"mm":return n.months[t.getMonth()].substring(0,2);case"m":return n.months[t.getMonth()].substring(0,1);case"MM":case"##":return(t.getMonth()<9?"0":"")+(t.getMonth()+1);case"M":case"#":return t.getMonth()+1;case"DAY":case"day":return n.days[t.getDay()];case"DDD":case"ddd":return n.days[t.getDay()].substring(0,3);case"dd":return n.days[t.getDay()].substring(0,2);case"d":return n.days[t.getDay()].substring(0,1);case"DD":return(t.getDate()<=9?"0":"")+t.getDate();case"D":return t.getDate();case"YYYY":case"yyyy":return t.getYear()+1900}},e._defaultDayStringParser=function(e,t,n){switch(e){case"DAY":case"day":return n.days[t];case"DDD":case"ddd":return n.days[t].substring(0,3);case"DD":case"dd":return n.days[t].substring(0,2);case"D":return n.days[t].substring(0,1)}},function(){if(void 0!==window.jsCalendar_language2load){for(;window.jsCalendar_language2load.length;)setTimeout(function(t){return function(){e.addLanguage(t)}}(window.jsCalendar_language2load.pop()),0);delete window.jsCalendar_language2load}}(),window.addEventListener("load",(function(){e.autoFind()}),!1)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,